//给定一个非空的整数数组，返回其中出现频率前 k 高的元素。
//
//
//
// 示例 1:
//
// 输入: nums = [1,1,1,2,2,3], k = 2
//输出: [1,2]
//
//
// 示例 2:
//
// 输入: nums = [1], k = 1
//输出: [1]
//
//
//
// 提示：
//
//
// 你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
// 你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。
// 题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。
// 你可以按任意顺序返回答案。
//
// Related Topics 堆 哈希表


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
	public int[] topKFrequent(int[] nums, int k) {
		if (k > nums.length || k == 0) return new int[0];

		Map<Integer, Integer> index = new HashMap<>();

		for (int i = 0; i < nums.length; i++) {
			index.put(nums[i], index.getOrDefault(nums[i], 0) + 1);
		}
		PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(k, new Comparator<Integer>() {
			@Override
			public int compare(Integer o1, Integer o2) {
				return index.get(o1) - index.get(o2);
			}
		});

		for (Integer key : index.keySet()) {
			if (minHeap.size() < k) {
				minHeap.offer(key);
			} else if (index.get(minHeap.peek()) < index.get(key)) {
				minHeap.poll();
				minHeap.offer(key);
			}
		}

		int[] res = new int[k];
		int i = 0;
		while (!minHeap.isEmpty()) {
			res[i++] = minHeap.poll();
		}
		return res;
	}
}
//leetcode submit region end(Prohibit modification and deletion)
